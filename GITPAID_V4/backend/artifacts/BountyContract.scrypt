struct __scrypt_ts_Change {  int amount;  Ripemd160 address;}

contract BountyContract {
  @state auto repoOwner;
  @state auto certServerKey;
  auto repoOwnerName;
  auto repoName;
  int issueNumber;
  bytes __scrypt_ts_ctx_hashoutputs;
  int __scrypt_ts_ctx_value;
  __scrypt_ts_Change __scrypt_ts_change;
  constructor(auto repoOwner, auto certServerKey, auto repoOwnerName, auto repoName, int issueNumber) {
    this.repoOwner = repoOwner;
    this.certServerKey = certServerKey;
    this.repoOwnerName = repoOwnerName;
    this.repoName = repoName;
    this.issueNumber = issueNumber;
  }
  public function addFunds(SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    auto out = ;
    auto outputs = out + ;
    require( == this.__scrypt_ts_ctx_hashoutputs);
  }
  public function payBounty(auto repoOwnerSig, auto certServerSig, auto userPubKey, int amount, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    require(checkSig(repoOwnerSig, this.repoOwner));
    require(checkSig(certServerSig, this.certServerKey));
    require(amount <= this.__scrypt_ts_ctx_value);
    auto devAddr = hash160(userPubKey);
    auto outputs = Utils.buildOutput(Utils.buildPublicKeyHashScript(devAddr), amount);
    int remaining = this.__scrypt_ts_ctx_value - amount;
    if(remaining > 0) {
        outputs += ;
      }
    outputs += ;
    require( == this.__scrypt_ts_ctx_hashoutputs);
  }
  public function withdraw(auto repoOwnerSig, int amount, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    require(checkSig(repoOwnerSig, this.repoOwner));
    require(amount <= this.__scrypt_ts_ctx_value);
    auto ownerAddr = hash160(this.repoOwner);
    auto outputs = Utils.buildOutput(Utils.buildPublicKeyHashScript(ownerAddr), amount);
    int remaining = this.__scrypt_ts_ctx_value - amount;
    if(remaining > 0) {
        outputs += ;
      }
    outputs += ;
    require( == this.__scrypt_ts_ctx_hashoutputs);
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
  function buildChangeOutput() : bytes {  return this.__scrypt_ts_change.amount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(this.__scrypt_ts_change.address), this.__scrypt_ts_change.amount) : b'';}
}